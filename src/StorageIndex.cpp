#include "StorageIndex.h"

#include "Exception.h"

#include <ibmtss/TPM_Types.h>

#include <type_traits>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace
{
    constexpr const tpmclient::StorageIndex::NativeType INVALID_INDEX = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

tpmclient::StorageIndex::StorageIndex()
: mIndex{INVALID_INDEX}
{
    static_assert(std::is_same_v<NativeType, TPMI_RH_NV_INDEX>);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

tpmclient::StorageIndex::StorageIndex(NativeType index)
: mIndex{index}
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool tpmclient::StorageIndex::isValid() const
{
    return mIndex != INVALID_INDEX;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

tpmclient::StorageIndex::NativeType tpmclient::StorageIndex::getNative() const
{
    if (!isValid())
    {
        throw Exception{"Unable to get storage index native type: index is invalid"};
    }

    return mIndex;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

tpmclient::StorageIndex::NativeType tpmclient::StorageIndex::operator*() const
{
    return getNative();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * (C) Copyright IBM Deutschland GmbH 2021, 2023
 * (C) Copyright IBM Corp 2021, 2023
 *
 * non-exclusively licensed to gematik GmbH
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Session.h"

#include "Exception.h"

#include <gtest/gtest.h>

#include <memory>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace
{
    tpmclient::Session GetOpenSession()
    {
        tpmclient::Session session{};
        session.open();

        return session;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TEST(SessionTests, staticLifetime)
{
    EXPECT_NO_THROW({ tpmclient::Session{}; });
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TEST(SessionTests, dynamicLifetime)
{
    EXPECT_NO_THROW({ std::make_shared<tpmclient::Session>(); });
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TEST(SessionTests, open)
{
    tpmclient::Session session{};

    EXPECT_TRUE(session.isClosed());
    EXPECT_NO_THROW(session.open());
    EXPECT_TRUE(session.isOpen());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TEST(SessionTests, close)
{
    auto session = GetOpenSession();

    EXPECT_NO_THROW(session.close());
    EXPECT_TRUE(session.isClosed());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TEST(SessionTests, open_alreadyOpen)
{
    auto session = GetOpenSession();
    EXPECT_THROW(session.open(), tpmclient::Exception);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TEST(SessionTests, close_alreadyClosed)
{
    tpmclient::Session session{};
    EXPECT_THROW(session.close(), tpmclient::Exception);

    auto openSession = GetOpenSession();
    openSession.close();
    EXPECT_THROW(openSession.close(), tpmclient::Exception);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TEST(SessionTests, getNative)
{
    auto session = GetOpenSession();
    EXPECT_EQ(session.getNative(), *session);

    auto session2 = GetOpenSession();
    EXPECT_NE(session.getNative(), session2.getNative());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TEST(SessionTests, getNative_whenClosed)
{
    tpmclient::Session session{};
    EXPECT_THROW(session.getNative(), tpmclient::Exception);

    session = GetOpenSession();
    session.close();
    EXPECT_THROW(session.getNative(), tpmclient::Exception);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
